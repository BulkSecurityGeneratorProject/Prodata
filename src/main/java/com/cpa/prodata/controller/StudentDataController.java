/*
 * Created on 2019-05-30 ( Date ISO 2019-05-30 - Time 14:40:06 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.cpa.prodata.controller;


import java.util.List;

import javax.validation.Valid;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.cpa.prodata.controller.dto.StudentDataDTO;
import com.cpa.prodata.service. StudentDataService;

/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Somesh Biswas version 3.0.0
 */
@RestController
@RequestMapping("/api/rest")
@CrossOrigin(origins = { "http://localhost:4200" })
public class StudentDataController {

	private static final Logger LOG = Logger.getLogger( StudentDataController.class);


	@Autowired
	private  StudentDataService studentDataService;

	
	@PostMapping("/createStudentData")
	public ResponseEntity<StudentDataDTO> insertStudentData(@Valid @RequestBody StudentDataDTO studentDataDTO,
			BindingResult result){
		HttpHeaders headers = new HttpHeaders();
				if(result.hasErrors()){
			return new ResponseEntity<>(headers, HttpStatus.PRECONDITION_FAILED);
				}
			StudentDataDTO datastudentDataDTO=null;
			try {
			datastudentDataDTO = studentDataService.persistStudentData(studentDataDTO);
			} catch (Exception e) {
				LOG.error("Error while inserting StudentData {}",e);
			}
			return new ResponseEntity<>(datastudentDataDTO, headers, HttpStatus.CREATED);
	}

	@GetMapping("/getAllStudentData")
	public ResponseEntity<List<StudentDataDTO>> getAllStudentData() {
		List<StudentDataDTO> studentDataDTOResp=null;
		try {
			studentDataDTOResp = studentDataService.retrieveAllStudentData();
		} catch (Exception e) {
			LOG.error("Error while retrieving all  StudentData {}",e);
		}
		return new ResponseEntity<>(studentDataDTOResp, HttpStatus.OK);
	}

		@GetMapping("/getStudentDataById/{rollno}")
	public ResponseEntity<StudentDataDTO> getStudentDataById(@PathVariable Long rollno) {
	StudentDataDTO studentDataDTO = null;
		try {
			studentDataDTO =  studentDataService.retrieveStudentDataById(rollno);
		} catch (Exception e) {
			LOG.error("Error while retrieving By StudentData ID {}",e);
		}
		return new ResponseEntity<>(studentDataDTO , HttpStatus.OK);
	}


	
	@PutMapping("/modifyStudentData")
	public ResponseEntity<StudentDataDTO> modifyStudentData(@Valid @RequestBody StudentDataDTO studentDataDTO,
			BindingResult result){
				if(result.hasErrors()){
			HttpHeaders headers = new HttpHeaders();
			return new ResponseEntity<>(headers, HttpStatus.PRECONDITION_FAILED);
			}

			HttpHeaders headers = new HttpHeaders();
			StudentDataDTO datastudentDataDTO=null;
			try {
			datastudentDataDTO = studentDataService.modifyStudentData(studentDataDTO);
			} catch (Exception e) {
				LOG.error("Error while inserting  Data {}",e);
			}
			return new ResponseEntity<>(datastudentDataDTO, headers, HttpStatus.CREATED);
	}


	@DeleteMapping("/removeStudentDataById/{rollno}")
	public ResponseEntity<Void> removeStudentDataById(@Valid @PathVariable Long rollno){
	StudentDataDTO studentDataDTO = studentDataService.retrieveStudentDataById(rollno);
	if(studentDataDTO !=null){
	studentDataService.deleteById( rollno);
	HttpHeaders headers= new HttpHeaders();
			return new ResponseEntity<>(headers, HttpStatus.NO_CONTENT);
	
	}

	else{
	HttpHeaders headers= new HttpHeaders();
		    return new ResponseEntity<>(headers, HttpStatus.PRECONDITION_REQUIRED);
	}
	
	}

}










