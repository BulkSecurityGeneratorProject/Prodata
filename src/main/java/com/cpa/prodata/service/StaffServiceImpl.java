/*
 * Created on 2019-07-08 ( Date ISO 2019-07-08 - Time 15:31:56 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.cpa.prodata.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import com.cpa.prodata.entity.Staff;
import com.cpa.prodata.repository.StaffRepository;
import com.cpa.prodata.controller.dto.StaffDTO;
import com.cpa.prodata.service.criteria.StaffCriteria;
import com.cpa.prodata.service.StaffService;
import com.cpa.prodata.controller.mapper.StaffMapper;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import java.util.Collections;
import java.util.List;
/**
 * Service implementation for Staff.
 * @author Somesh Biswas version 3.0.0
 */
@Service
public class StaffServiceImpl implements StaffService {

private static final Logger LOG = Logger.getLogger(StaffServiceImpl.class);

	@Autowired
	private StaffRepository staffRepository;

	@Autowired
	private StaffMapper staffMapper;

	
		

	public StaffDTO persistStaff(StaffDTO staffDTOpersist){
	try{
	if(staffDTOpersist !=null){
		

	 Staff staff = staffMapper.convertStaffDTOToEntity(staffDTOpersist);
	 Staff staffIn =  staffRepository.saveAndFlush(staff);
	return (staffIn !=null) ?  staffMapper.convertEntityToStaffDTO(staffIn) : null;
	}
}
		catch (Exception e){
			LOG.error("Error while inserting Staff {} ", e);
		}
return null;
	}

 public StaffDTO retrieveStaffById(Long staffId){

	try {
		
			Staff staff = staffRepository.findById(staffId).get();
			return (staff != null) ?  staffMapper.convertEntityToStaffDTO(staff) :null;
		}
		catch (Exception e){
			LOG.error("Error Message",e);
		}
		return null;
	}

public List<StaffDTO> retrieveAllStaff(){
try {
List<Staff> staffList = staffRepository.findAll();
return( staffList != null) ?  staffMapper.entityListToStaffDTOList(staffList) : null;
		}
		catch (Exception e){
			LOG.error("Error message",e);
		}
		return Collections.emptyList();

}

public 	StaffDTO modifyStaff(StaffDTO staffDTOUpdate){
	try{
	if(staffDTOUpdate !=null){
					Staff  staff = staffRepository.findById(staffDTOUpdate.getStaffId()).get();
	 Staff staffUpdate =  staffRepository.save(staff);
	return (staffUpdate !=null) ?  staffMapper.convertEntityToStaffDTO(staffUpdate) : null;
					
	}
}
	catch (Exception e){
			LOG.error("Error while updating Staff {} ", e);
		}
return null;
	}

public void deleteById(Long staffId){



}



}











