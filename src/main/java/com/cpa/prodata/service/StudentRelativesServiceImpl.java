/*
 * Created on 2019-05-30 ( Date ISO 2019-05-30 - Time 14:40:06 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.cpa.prodata.service;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import com.cpa.prodata.entity.StudentRelatives;
import com.cpa.prodata.repository.StudentRelativesRepository;
import com.cpa.prodata.controller.dto.StudentRelativesDTO;
import com.cpa.prodata.service.criteria.StudentRelativesCriteria;
import com.cpa.prodata.service.StudentRelativesService;
import com.cpa.prodata.controller.mapper.StudentRelativesMapper;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import java.util.Collections;
import java.util.List;

/**
 * Service implementation for StudentRelatives.
 * 
 * @author Somesh Biswas version 3.0.0
 */
@Service
public class StudentRelativesServiceImpl implements StudentRelativesService {

	private static final Logger LOG = Logger.getLogger(StudentRelativesServiceImpl.class);

	private StudentRelativesRepository studentRelativesRepository;

	private StudentRelativesMapper studentRelativesMapper;

	private MailService mailService;

	public StudentRelativesServiceImpl(StudentRelativesRepository studentRelativesRepository,
			StudentRelativesMapper studentRelativesMapper, MailService mailService) {
		super();
		this.studentRelativesRepository = studentRelativesRepository;
		this.studentRelativesMapper = studentRelativesMapper;
		this.mailService = mailService;
	}

	public StudentRelativesDTO persistStudentRelatives(StudentRelativesDTO studentRelativesDTOpersist) {
		try {
			if (studentRelativesDTOpersist != null) {

				StudentRelatives studentRelatives = studentRelativesMapper
						.convertStudentRelativesDTOToEntity(studentRelativesDTOpersist);
				System.out.println("****IN RELATIVES PERSIST*****" + studentRelatives.toString());
				StudentRelatives studentRelativesIn = studentRelativesRepository.saveAndFlush(studentRelatives);
				return (studentRelativesIn != null)
						? studentRelativesMapper.convertEntityToStudentRelativesDTO(studentRelativesIn)
						: null;
			}
		} catch (Exception e) {
			StringWriter sw = new StringWriter();
			e.printStackTrace(new PrintWriter(sw));
			String exceptionAsString = "Error while inserting Student Relatives {} " + sw.toString();
			mailService.sendEmail("prodata.dev.ind@gmail.com", "Exception in Prodata", exceptionAsString, false, false);
			LOG.error("Error while inserting StudentRelatives {} ", e);
		}
		return null;
	}

	public List<StudentRelativesDTO> retrieveStudentRelativesByRoll(Long rollno) {

		try {

			List<StudentRelatives> studentRelatives = studentRelativesRepository.findByRoll(rollno);
			return (studentRelatives != null)
					? studentRelativesMapper.entityListToStudentRelativesDTOList(studentRelatives)
					: null;
		} catch (Exception e) {
			StringWriter sw = new StringWriter();
			e.printStackTrace(new PrintWriter(sw));
			String exceptionAsString = "Error while retreiving Student Relative by Roll No "+"{"+rollno+"}"+ sw.toString();
			mailService.sendEmail("prodata.dev.ind@gmail.com", "Exception in Prodata", exceptionAsString, false, false);
			LOG.error("Error Message", e);
		}
		return null;
	}

	public List<StudentRelativesDTO> retrieveAllStudentRelatives() {
		try {
			List<StudentRelatives> studentRelativesList = studentRelativesRepository.findAll();
			return (studentRelativesList != null)
					? studentRelativesMapper.entityListToStudentRelativesDTOList(studentRelativesList)
					: null;
		} catch (Exception e) {
			StringWriter sw = new StringWriter();
			e.printStackTrace(new PrintWriter(sw));
			String exceptionAsString = "Error while retreiving All Student Relatives Info {} " + sw.toString();
			mailService.sendEmail("prodata.dev.ind@gmail.com", "Exception in Prodata", exceptionAsString, false, false);
			LOG.error("Error message", e);
		}
		return Collections.emptyList();

	}

	public StudentRelativesDTO modifyStudentRelatives(StudentRelativesDTO studentRelativesDTOUpdate) {
		try {
			if (studentRelativesDTOUpdate != null) {
				StudentRelatives studentRelatives = studentRelativesRepository
						.findById(studentRelativesDTOUpdate.getId()).get();
				StudentRelatives studentRelativesUpdate = studentRelativesRepository.save(studentRelatives);
				return (studentRelativesUpdate != null)
						? studentRelativesMapper.convertEntityToStudentRelativesDTO(studentRelativesUpdate)
						: null;

			}
		} catch (Exception e) {
			StringWriter sw = new StringWriter();
			e.printStackTrace(new PrintWriter(sw));
			String exceptionAsString = "Error while inserting StudentData "+"{"+studentRelativesDTOUpdate+"}" + sw.toString();
			mailService.sendEmail("prodata.dev.ind@gmail.com", "Exception in Prodata", exceptionAsString, false, false);
			LOG.error("Error while updating StudentRelatives {} ", e);
		}
		return null;
	}

	public void deleteById(Integer id) {
		StudentRelatives studentRelatives = studentRelativesRepository.findById(id).get();
		if (studentRelatives != null) {
			studentRelativesRepository.deleteById(id);
		}

	}

	@Override
	public StudentRelativesDTO retrieveStudentRelativesById(Integer id) {

		try {

			StudentRelatives studentRelatives = studentRelativesRepository.findById(id).get();
			return (studentRelatives != null)
					? studentRelativesMapper.convertEntityToStudentRelativesDTO(studentRelatives)
					: null;
		} catch (Exception e) {
			StringWriter sw = new StringWriter();
			e.printStackTrace(new PrintWriter(sw));
			String exceptionAsString = "Error while retreiving Student Relative by id "+"{"+id+"}"+ sw.toString();
			mailService.sendEmail("prodata.dev.ind@gmail.com", "Exception in Prodata", exceptionAsString, false, false);
			LOG.error("Error Message", e);
		}
		return null;
	}
}
