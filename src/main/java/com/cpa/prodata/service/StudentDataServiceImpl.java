/*
 * Created on 2019-05-30 ( Date ISO 2019-05-30 - Time 14:40:05 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.cpa.prodata.service;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import com.cpa.prodata.entity.StudentData;
import com.cpa.prodata.repository.StudentDataRepository;
import com.cpa.prodata.controller.dto.StudentDataDTO;
import com.cpa.prodata.service.criteria.StudentDataCriteria;
import com.cpa.prodata.service.StudentDataService;
import com.cpa.prodata.controller.mapper.StudentDataMapper;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import java.util.Collections;
import java.util.List;

/**
 * Service implementation for StudentData.
 * 
 * @author Somesh Biswas version 3.0.0
 */
@Service
public class StudentDataServiceImpl implements StudentDataService {

	private static final Logger LOG = Logger.getLogger(StudentDataServiceImpl.class);

	private StudentDataRepository studentDataRepository;

	private StudentDataMapper studentDataMapper;

	private MailService mailService;

	public StudentDataServiceImpl(StudentDataRepository studentDataRepository, StudentDataMapper studentDataMapper,
			MailService mailService) {

		this.studentDataRepository = studentDataRepository;
		this.studentDataMapper = studentDataMapper;
		this.mailService = mailService;
	}

	public StudentDataDTO persistStudentData(StudentDataDTO studentDataDTOpersist) {
		try {
			if (studentDataDTOpersist != null) {

				StudentData studentData = studentDataMapper.convertStudentDataDTOToEntity(studentDataDTOpersist);
				StudentData studentDataIn = studentDataRepository.saveAndFlush(studentData);
				return (studentDataIn != null) ? studentDataMapper.convertEntityToStudentDataDTO(studentDataIn) : null;
			}
		} catch (Exception e) {
			StringWriter sw = new StringWriter();
			e.printStackTrace(new PrintWriter(sw));
			String exceptionAsString = "Error while inserting StudentData {} " + sw.toString();
			mailService.sendEmail("prodata.dev.ind@gmail.com", "Exception in Prodata", exceptionAsString, false, false);
			LOG.error("Error while inserting StudentData {} ", e);
		}
		return null;
	}

	public StudentDataDTO retrieveStudentDataById(Long rollno) {
		try {
			
			StudentData studentData = studentDataRepository.findById(rollno).get();
			return (studentData != null) ? studentDataMapper.convertEntityToStudentDataDTO(studentData) : null;
		} catch (Exception e) {
			StringWriter sw = new StringWriter();
			e.printStackTrace(new PrintWriter(sw));
			String exceptionAsString = "Error while retreiving StudentData By Roll No: " + rollno + sw.toString();
			mailService.sendEmail("prodata.dev.ind@gmail.com", "Exception in Prodata", exceptionAsString, false, false);
			LOG.error("Error Message", e);
		}
		return null;
	}

	public List<StudentDataDTO> retrieveAllStudentData() {
		try {
			List<StudentData> studentDataList = studentDataRepository.getAllStudents();
			return (studentDataList != null) ? studentDataMapper.entityListToStudentDataDTOList(studentDataList) : null;
		} catch (Exception e) {
			StringWriter sw = new StringWriter();
			e.printStackTrace(new PrintWriter(sw));
			String exceptionAsString = "Error while retreiving all StudentData {} " + sw.toString();
			mailService.sendEmail("prodata.dev.ind@gmail.com", "Exception in Prodata", exceptionAsString, false, false);
			LOG.error("Error message", e);
		}
		return Collections.emptyList();

	}

	public StudentDataDTO modifyStudentData(StudentDataDTO studentDataDTOUpdate) {
		try {
			if (studentDataDTOUpdate != null) {
				StudentData studentData = studentDataRepository.findById(studentDataDTOUpdate.getRollno()).get();
				StudentData studentDataUpdate = studentDataRepository.save(studentData);
				return (studentDataUpdate != null) ? studentDataMapper.convertEntityToStudentDataDTO(studentDataUpdate)
						: null;

			}
		} catch (Exception e) {
			StringWriter sw = new StringWriter();
			e.printStackTrace(new PrintWriter(sw));
			String exceptionAsString = "Error while modifying StudentData {} " + studentDataDTOUpdate.getRollno()
					+ sw.toString();
			mailService.sendEmail("prodata.dev.ind@gmail.com", "Exception in Prodata", exceptionAsString, false, false);
			LOG.error("Error while updating StudentData {} ", e);
		}
		return null;
	}

	public void deleteById(Long rollno) {
		try {
			Optional<StudentData> studentData = studentDataRepository.findById(rollno);
			if (studentData != null) {
				studentDataRepository.deleteStudent(rollno);
			}
		} catch (Exception e) {
			StringWriter sw = new StringWriter();
			e.printStackTrace(new PrintWriter(sw));
			String exceptionAsString = "Error while deleting StudentData {}" + rollno + sw.toString();
			mailService.sendEmail("prodata.dev.ind@gmail.com", "Exception in Prodata", exceptionAsString, false, false);
			LOG.error("Error while updating StudentData {} ", e);
		}

	}

}
