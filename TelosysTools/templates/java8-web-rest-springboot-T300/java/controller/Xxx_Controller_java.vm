## Include
#parse("include/var_entity.vm")
## Use macro resolve header
#package($SRC)
## use macro for feed $haveCriteria
#haveCriteria()
## Resolve mapping path, e.g. "{customerCode}/{bookId}"
#set($mappingPath = '')
#foreach($field in $entity.keyAttributes)
#if($foreach.count > 1)
#set($mappingPath = "${mappingPath}/")
#end
#set($mappingPath = "${mappingPath}{$field.name}")
#end
## Resolve path variable, e.g. "@PathParam("customerCode") String customerCode, @PathParam("bookId") Integer bookId"
#set($pathVariable = '')
#foreach( $field in $entity.keyAttributes )
#if($foreach.count > 1)
#set($pathVariable = "${pathVariable}, ")
#end
#set($pathVariable = "${pathVariable}@PathVariable(""${field.name}"") ${field.type} $field.name" )
#end
## Resolve id for logger, e.g. "{customerCode}/{bookId}"
#set($idForLogger = '')
#foreach($field in $entity.keyAttributes)
#set($idForLogger = "${idForLogger}/$field.name")
#end


import ${pack_resource}.$resourceClass;
import ${pack_service}. $serviceInterface;
import javax.validation.Valid;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.CrossOrigin;
import java.util.List;
import org.springframework.web.bind.annotation.RequestParam;

/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * $author
 */
@RestController
@RequestMapping("/api/rest")
@CrossOrigin(origins = { "http://localhost:4300" })
public class $controllerClass {

	private static final Logger LOG = Logger.getLogger( ${controllerClass}.class);


	@Autowired
	private  $serviceInterface ${serviceInstance};

	
	@PostMapping("/create${entityClass}")
	public ResponseEntity<${resourceClass}> insert${entityClass}(@Valid @RequestBody ${resourceClass} ${resourceInstance},
			BindingResult result){
				if(result.hasErrors()){
			HttpHeaders headers = new HttpHeaders();
			return new ResponseEntity<>(headers, HttpStatus.PRECONDITION_FAILED);
			}

			HttpHeaders headers = new HttpHeaders();
			${resourceClass} data${resourceInstance}=null;
			try {
			data${resourceInstance} = ${serviceInstance}.persist${entityClass}(${resourceInstance});
			} catch (Exception e) {
				LOG.error("Error while inserting ${entityClass} {}",e);
			}
			return new ResponseEntity<>(data${resourceInstance}, headers, HttpStatus.CREATED);
	}

	@GetMapping("/getAll${entityClass}")
	public ResponseEntity<List<${resourceClass}>> getAll${entityClass}() {
		List<${resourceClass}> ${resourceInstance}Resp=null;
		try {
			${resourceInstance}Resp = ${serviceInstance}.retrieveAll${entityClass}();
		} catch (Exception e) {
			LOG.error("Error while retrieving all  ${entityClass} {}",e);
		}
		return new ResponseEntity<>(${resourceInstance}Resp, HttpStatus.OK);
	}

		@GetMapping("/get${entityClass}ById")
#foreach( $attrib in $entity.attributes )
	public ResponseEntity<${resourceClass}> get${entityClass}ById(@RequestParam("id") $attrib.type $attrib.name) {
	${resourceClass} ${resourceInstance} = null;
		try {
			${resourceInstance} =  ${serviceInstance}.retrieve${entityClass}ById( $attrib.name);
		} catch (Exception e) {
			LOG.error("Error while retrieving By ${entityClass} ID {}",e);
		}
		return new ResponseEntity<>(${resourceInstance} , HttpStatus.OK);
	}
#break
#end


	
	@PutMapping("/modify${entityClass}")
	public ResponseEntity<${resourceClass}> modify${entityClass}(@Valid @RequestBody ${resourceClass} ${resourceInstance},
			BindingResult result){
				if(result.hasErrors()){
			HttpHeaders headers = new HttpHeaders();
			return new ResponseEntity<>(headers, HttpStatus.PRECONDITION_FAILED);
			}

			HttpHeaders headers = new HttpHeaders();
			${resourceClass} data${resourceInstance}=null;
			try {
			data${resourceInstance} = ${serviceInstance}.modify${entityClass}(${resourceInstance});
			} catch (Exception e) {
				LOG.error("Error while inserting  Data {}",e);
			}
			return new ResponseEntity<>(data${resourceInstance}, headers, HttpStatus.CREATED);
	}


	@DeleteMapping("/remove${entityClass}ById")
#foreach( $attrib in $entity.attributes )
	public ResponseEntity<Void> remove${entityClass}ById(@Valid @RequestParam("id") $attrib.type $attrib.name){
	${resourceClass} ${resourceInstance} = ${serviceInstance}.retrieve${entityClass}ById($attrib.name);
	if(${resourceInstance} !=null){
	${serviceInstance}.deleteById( $attrib.name);
	HttpHeaders headers= new HttpHeaders();
			return new ResponseEntity<>(headers, HttpStatus.NO_CONTENT);
	
	}

	else{
	HttpHeaders headers= new HttpHeaders();
		    return new ResponseEntity<>(headers, HttpStatus.PRECONDITION_REQUIRED);
	}
	
	}
#break
#end

}










